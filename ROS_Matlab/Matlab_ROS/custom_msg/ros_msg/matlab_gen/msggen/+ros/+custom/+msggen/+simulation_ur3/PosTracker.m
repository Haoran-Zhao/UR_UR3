classdef PosTracker < ros.Message
    %PosTracker MATLAB implementation of simulation_ur3/PosTracker
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'simulation_ur3/PosTracker' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '89129e0c6ca6b02f521b2e681ee9b035' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        CX
        CY
        CZ
        GX
        GY
        GZ
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CX', 'CY', 'CZ', 'GX', 'GY', 'GZ'} % List of non-constant message properties
        ROSPropertyList = {'c_X', 'c_Y', 'c_Z', 'g_X', 'g_Y', 'g_Z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PosTracker(msg)
            %PosTracker Construct the message object PosTracker
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function cx = get.CX(obj)
            %get.CX Get the value for property CX
            cx = double(obj.JavaMessage.getCX);
        end
        
        function set.CX(obj, cx)
            %set.CX Set the value for property CX
            validateattributes(cx, {'numeric'}, {'nonempty', 'scalar'}, 'PosTracker', 'CX');
            
            obj.JavaMessage.setCX(cx);
        end
        
        function cy = get.CY(obj)
            %get.CY Get the value for property CY
            cy = double(obj.JavaMessage.getCY);
        end
        
        function set.CY(obj, cy)
            %set.CY Set the value for property CY
            validateattributes(cy, {'numeric'}, {'nonempty', 'scalar'}, 'PosTracker', 'CY');
            
            obj.JavaMessage.setCY(cy);
        end
        
        function cz = get.CZ(obj)
            %get.CZ Get the value for property CZ
            cz = double(obj.JavaMessage.getCZ);
        end
        
        function set.CZ(obj, cz)
            %set.CZ Set the value for property CZ
            validateattributes(cz, {'numeric'}, {'nonempty', 'scalar'}, 'PosTracker', 'CZ');
            
            obj.JavaMessage.setCZ(cz);
        end
        
        function gx = get.GX(obj)
            %get.GX Get the value for property GX
            gx = double(obj.JavaMessage.getGX);
        end
        
        function set.GX(obj, gx)
            %set.GX Set the value for property GX
            validateattributes(gx, {'numeric'}, {'nonempty', 'scalar'}, 'PosTracker', 'GX');
            
            obj.JavaMessage.setGX(gx);
        end
        
        function gy = get.GY(obj)
            %get.GY Get the value for property GY
            gy = double(obj.JavaMessage.getGY);
        end
        
        function set.GY(obj, gy)
            %set.GY Set the value for property GY
            validateattributes(gy, {'numeric'}, {'nonempty', 'scalar'}, 'PosTracker', 'GY');
            
            obj.JavaMessage.setGY(gy);
        end
        
        function gz = get.GZ(obj)
            %get.GZ Get the value for property GZ
            gz = double(obj.JavaMessage.getGZ);
        end
        
        function set.GZ(obj, gz)
            %set.GZ Set the value for property GZ
            validateattributes(gz, {'numeric'}, {'nonempty', 'scalar'}, 'PosTracker', 'GZ');
            
            obj.JavaMessage.setGZ(gz);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CX = obj.CX;
            cpObj.CY = obj.CY;
            cpObj.CZ = obj.CZ;
            cpObj.GX = obj.GX;
            cpObj.GY = obj.GY;
            cpObj.GZ = obj.GZ;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CX = strObj.CX;
            obj.CY = strObj.CY;
            obj.CZ = strObj.CZ;
            obj.GX = strObj.GX;
            obj.GY = strObj.GY;
            obj.GZ = strObj.GZ;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CX = obj.CX;
            strObj.CY = obj.CY;
            strObj.CZ = obj.CZ;
            strObj.GX = obj.GX;
            strObj.GY = obj.GY;
            strObj.GZ = obj.GZ;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.simulation_ur3.PosTracker.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.simulation_ur3.PosTracker;
            obj.reload(strObj);
        end
    end
end
