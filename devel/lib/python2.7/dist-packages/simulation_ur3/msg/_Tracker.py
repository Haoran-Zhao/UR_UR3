# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulation_ur3/Tracker.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Tracker(genpy.Message):
  _md5sum = "8c54a711bf68e69302a10bb7bfb7ca79"
  _type = "simulation_ur3/Tracker"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# message type to describe the input of keyboard
# to be published as a topic

float64 up  # move up z+
float64 down  # move down z-
float64 left  # move left y+
float64 right  # move down y-
float64 forward  # move forward x+
float64 backward  # move backward x-

bool init_joint #initialize joint
bool init_position #initialize position
"""
  __slots__ = ['up','down','left','right','forward','backward','init_joint','init_position']
  _slot_types = ['float64','float64','float64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       up,down,left,right,forward,backward,init_joint,init_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tracker, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.up is None:
        self.up = 0.
      if self.down is None:
        self.down = 0.
      if self.left is None:
        self.left = 0.
      if self.right is None:
        self.right = 0.
      if self.forward is None:
        self.forward = 0.
      if self.backward is None:
        self.backward = 0.
      if self.init_joint is None:
        self.init_joint = False
      if self.init_position is None:
        self.init_position = False
    else:
      self.up = 0.
      self.down = 0.
      self.left = 0.
      self.right = 0.
      self.forward = 0.
      self.backward = 0.
      self.init_joint = False
      self.init_position = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d2B().pack(_x.up, _x.down, _x.left, _x.right, _x.forward, _x.backward, _x.init_joint, _x.init_position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.up, _x.down, _x.left, _x.right, _x.forward, _x.backward, _x.init_joint, _x.init_position,) = _get_struct_6d2B().unpack(str[start:end])
      self.init_joint = bool(self.init_joint)
      self.init_position = bool(self.init_position)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d2B().pack(_x.up, _x.down, _x.left, _x.right, _x.forward, _x.backward, _x.init_joint, _x.init_position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.up, _x.down, _x.left, _x.right, _x.forward, _x.backward, _x.init_joint, _x.init_position,) = _get_struct_6d2B().unpack(str[start:end])
      self.init_joint = bool(self.init_joint)
      self.init_position = bool(self.init_position)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d2B = None
def _get_struct_6d2B():
    global _struct_6d2B
    if _struct_6d2B is None:
        _struct_6d2B = struct.Struct("<6d2B")
    return _struct_6d2B
