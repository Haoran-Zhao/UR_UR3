// Generated by gencpp from file ur3_hardware/Tracker.msg
// DO NOT EDIT!


#ifndef UR3_HARDWARE_MESSAGE_TRACKER_H
#define UR3_HARDWARE_MESSAGE_TRACKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur3_hardware
{
template <class ContainerAllocator>
struct Tracker_
{
  typedef Tracker_<ContainerAllocator> Type;

  Tracker_()
    : up(0.0)
    , down(0.0)
    , left(0.0)
    , right(0.0)
    , forward(0.0)
    , backward(0.0)
    , init_joint(false)
    , init_position(false)  {
    }
  Tracker_(const ContainerAllocator& _alloc)
    : up(0.0)
    , down(0.0)
    , left(0.0)
    , right(0.0)
    , forward(0.0)
    , backward(0.0)
    , init_joint(false)
    , init_position(false)  {
  (void)_alloc;
    }



   typedef double _up_type;
  _up_type up;

   typedef double _down_type;
  _down_type down;

   typedef double _left_type;
  _left_type left;

   typedef double _right_type;
  _right_type right;

   typedef double _forward_type;
  _forward_type forward;

   typedef double _backward_type;
  _backward_type backward;

   typedef uint8_t _init_joint_type;
  _init_joint_type init_joint;

   typedef uint8_t _init_position_type;
  _init_position_type init_position;





  typedef boost::shared_ptr< ::ur3_hardware::Tracker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur3_hardware::Tracker_<ContainerAllocator> const> ConstPtr;

}; // struct Tracker_

typedef ::ur3_hardware::Tracker_<std::allocator<void> > Tracker;

typedef boost::shared_ptr< ::ur3_hardware::Tracker > TrackerPtr;
typedef boost::shared_ptr< ::ur3_hardware::Tracker const> TrackerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur3_hardware::Tracker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur3_hardware::Tracker_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ur3_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ur3_hardware': ['/home/haoran/US_UR3/src/ur3_hardware/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ur3_hardware::Tracker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur3_hardware::Tracker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur3_hardware::Tracker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur3_hardware::Tracker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_hardware::Tracker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_hardware::Tracker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur3_hardware::Tracker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c54a711bf68e69302a10bb7bfb7ca79";
  }

  static const char* value(const ::ur3_hardware::Tracker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c54a711bf68e693ULL;
  static const uint64_t static_value2 = 0x02a10bb7bfb7ca79ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur3_hardware::Tracker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur3_hardware/Tracker";
  }

  static const char* value(const ::ur3_hardware::Tracker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur3_hardware::Tracker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message type to describe the tracking information of the blocks\n\
# to be published as a topic\n\
\n\
float64 up  # move up z+\n\
float64 down  # move down z-\n\
float64 left  # move left y+\n\
float64 right  # move down y-\n\
float64 forward  # move forward x+\n\
float64 backward  # move backward x-\n\
\n\
bool init_joint #initialize joint\n\
bool init_position #initialize position\n\
";
  }

  static const char* value(const ::ur3_hardware::Tracker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur3_hardware::Tracker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up);
      stream.next(m.down);
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.forward);
      stream.next(m.backward);
      stream.next(m.init_joint);
      stream.next(m.init_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tracker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur3_hardware::Tracker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur3_hardware::Tracker_<ContainerAllocator>& v)
  {
    s << indent << "up: ";
    Printer<double>::stream(s, indent + "  ", v.up);
    s << indent << "down: ";
    Printer<double>::stream(s, indent + "  ", v.down);
    s << indent << "left: ";
    Printer<double>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<double>::stream(s, indent + "  ", v.right);
    s << indent << "forward: ";
    Printer<double>::stream(s, indent + "  ", v.forward);
    s << indent << "backward: ";
    Printer<double>::stream(s, indent + "  ", v.backward);
    s << indent << "init_joint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_joint);
    s << indent << "init_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR3_HARDWARE_MESSAGE_TRACKER_H
